/*
 * Copyright 2002-2015 by bafeimao.net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://maven.oschina.net/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.1'
    }
}

// 所有子项目的通用配置
subprojects {
    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'

    version '1.0-SNAPSHOT'

    // JVM 版本号要求
    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //定义版本号
    ext {
        springVersion = '4.2.1.RELEASE'
        hibernateVersion = '5.0.2.Final'
    }

    repositories {
        // 添加国内源，提高下载速度
        maven { url 'http://maven.oschina.net/content/groups/public/' }
        maven { url 'http://maven.oschina.net/content/groups/thirdparty/' }

        maven { url 'https://oss.sonatype.org/content/repositories/public/' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

        mavenLocal()
        jcenter()
        mavenCentral()
    }

    configurations {
        // 所有需要忽略的包定义在此
        all*.exclude group: 'commons-httpclient'
        // all*.exclude group: 'commons-logging'
        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    dependencies {
        compile(
                // Logback and log4j
                "ch.qos.logback:logback-classic:1.1.3",
                "ch.qos.logback:logback-core:1.1.3",
                "org.slf4j:slf4j-api:1.7.12",
                'log4j:log4j:1.2.17',

                // Google Related
                "com.google.guava:guava:18.0",
                'com.google.protobuf:protobuf-java:3.0.0-beta-1',

                // Well-known libs
                'joda-time:joda-time:2.9',
                'org.quartz-scheduler:quartz:2.2.2',

                // Jackson
                'com.fasterxml.jackson.core:jackson-core:2.4.2',
                'com.fasterxml.jackson.core:jackson-annotations:2.4.2',
                'com.fasterxml.jackson.core:jackson-databind:2.4.2',
        )

        // 依赖maven中不存在的jar
        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')

        compile jarTree

        // 测试依赖
        testCompile(
                "junit:junit:4.11"
        )
    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }

    protobuf {
        // Configure the protoc executable
        protoc {
            // Download from repositories
            artifact = 'com.google.protobuf:protoc:3.0.0-beta-1'
        }

        // Configure the codegen plugins
        plugins {
            // Define a plugin with name 'grpc'
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:0.9.0'
                // or
//            path = 'tools/protoc-gen-grpc-java'
            }
//        xrpc {
//            path = 'tools/protoc-gen-xrpc'
//        }
        }

        generateProtoTasks {
            // all() returns the collection of all protoc tasks
            all().each { task ->
                // Configure built-in outputs. Each block generates a
                // '--<name>_out' flag to the protoc command line.
                task.builtins {
                    // In Java projects, the "java" output is added automatically.
                    // You only need it if you want it in an Android project or want to add
                    // options.
                    // DO NOT omit the braces if you want this builtin to be added.
                    java {}
                }

                // Configure codegen plugins. Each block generates two flags
                // to the protoc command line:
                //  - '--plugin=protoc-gen-<name>:<plugin-path>', and
                //  - '--<name>_out=<output-dir>
                // <name> must have been defined in the protobuf.plugins block
                task.plugins {
                    // Use the "grpc" plugin in this task.
                    grpc {
                        // Options added to --grpc_out
//                    option 'nano=true'

//                    outputSubDir = 'grpcjava'
                    }
                    // Use the "xrpc" plugin, with no options (braces cannot be omitted)
//                xrpc { }
                    // Any other plugins
                }

                // If true, will generate a descriptor_set.desc file under
                // $generatedFilesBaseDir/$sourceSet. Default is false.
                // See --descriptor_set_out in protoc documentation about what it is.
//            task.generateDescriptorSet = true
            }

            // In addition to all(), you may get the task collection by various
            // criteria:

            // (Java only) returns tasks for a sourceSet
            ofSourceSet('main')
        }

        generatedFilesBaseDir = "$projectDir/src/generated"
    }

    // 显示当前项目下所有用于 compile 的 jar.
    task listJars(description: 'Displays all compile jars.') << {
        configurations.compile.each { File file -> println '    ' + file.name }
    }

    task genDefaultDirs(description: 'Generates default java project structures') << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

project(":umbrella-support") {
    dependencies {
        compile(
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-orm:$springVersion",

                "org.hibernate:hibernate-core:$hibernateVersion",
                'org.hibernate:hibernate-validator:5.2.2.Final',
                'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',

                // POI
                'org.apache.poi:poi:3.13',
                'org.apache.poi:poi-ooxml:3.13',

                'commons-io:commons-io:2.4',
                'javax.persistence:persistence-api:1.0.2',
                'io.netty:netty-all:4.0.33.Final',
                'io.grpc:grpc-all:0.9.0',
                'com.esotericsoftware.reflectasm:reflectasm:1.09',
                'redis.clients:jedis:2.7.3',
                'commons-configuration:commons-configuration:1.10',
                'org.aspectj:aspectjweaver:1.8.7',
                'com.googlecode.cqengine:cqengine:1.0.3'
        )
    }
}

project(":umbrella-servers") {
    dependencies {
        compile(
                project(':umbrella-support'),

                'org.springframework.data:spring-data-redis:1.6.0.RELEASE',

                'com.cloudhopper.proxool:proxool:0.9.1',
                'com.cloudhopper.proxool:proxool-cglib:0.9.1',

                'com.googlecode.cqengine:cqengine:1.0.3'
        )

        testCompile(
                "org.springframework:spring-test:$springVersion",
        )
    }
}

project(":umbrella-web") {
    dependencies {
        compile(
                "org.springframework:spring-context:$springVersion",
                "org.springframework:spring-tx:$springVersion",
                "org.springframework:spring-orm:$springVersion",
                "org.springframework:spring-webmvc:$springVersion",
                "org.springframework:spring-jdbc:$springVersion",
                'org.springframework:spring-support:2.0.8',

                "org.hibernate:hibernate-core:$hibernateVersion",
                'org.hibernate:hibernate-validator:5.2.2.Final',
                'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final',

                'javax.servlet:javax.servlet-api:3.1.0',
                'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.1',

                'javax.validation:validation-api:1.1.0.Final',
                "com.google.code:kaptcha:2.3.2",
                'javax.mail:mail:1.4.7',
                'org.apache.velocity:velocity:1.7',
                'org.aspectj:aspectjweaver:1.8.7',

                'commons-codec:commons-codec:1.10',
                'mysql:mysql-connector-java:5.1.37',

                'com.cloudhopper.proxool:proxool:0.9.1',
                'com.cloudhopper.proxool:proxool-cglib:0.9.1',
        )

        testCompile(
                "org.springframework:spring-test:$springVersion",
                'org.hamcrest:hamcrest-all:1.3'
        )
    }
}


